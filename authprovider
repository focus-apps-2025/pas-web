// src/services/authProvider.js
import React, { createContext, useState, useEffect, useContext } from 'react';
import apiService from './api';
import authManager from './authsession';

// Create context
const AuthContext = createContext(null);

// Create AuthProvider component
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);

  // Initialize auth state on component mount
  useEffect(() => {
    const initAuth = async () => {
      try {
        const isLoggedIn = await authManager.isLoggedIn();
        if (isLoggedIn) {
          const user = await authManager.getCurrentUser();
          setCurrentUser(user);
          setAuthenticated(true);
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        // Reset auth state on error
        await authManager.logout();
      } finally {
        setLoading(false);
      }
    };

    initAuth();
  }, []);

  // Login function
  const login = async (email, password) => {
    setLoading(true);
    try {
      const result = await apiService.login(email, password);
      if (result.success) {
        setCurrentUser(result.user);
        setAuthenticated(true);
        return { success: true, user: result.user };
      } else {
        return { success: false, message: result.message };
      }
    } catch (error) {
      console.error('Login error:', error);
      return { 
        success: false, 
        message: error.message || 'An unexpected error occurred' 
      };
    } finally {
      setLoading(false);
    }
  };

  // Logout function
  const logout = async () => {
    setLoading(true);
    try {
      await apiService.logout();
      setCurrentUser(null);
      setAuthenticated(false);
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setLoading(false);
    }
  };

  // Context value
  const value = {
    currentUser,
    isAuthenticated: authenticated,
    isLoading: loading,
    login,
    logout
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use the auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthProvider;
